Write-Host "\nStarting Azure SQL Database Backup Script...\n" -ForegroundColor Cyan

# Login to Azure (if not already logged in)
Write-Host "Checking Azure authentication..." -ForegroundColor Yellow
if (-not (Get-AzContext)) {
    Connect-AzAccount
}

# Prompt for user inputs
$resourceGroupName = Read-Host "Enter the resource group name"
$sqlServerName = Read-Host "Enter the SQL Server name"
$sqlDatabaseName = Read-Host "Enter the SQL Database name"
$storageAccountName = Read-Host "Enter the Storage Account name"
$containerName = Read-Host "Enter the Blob Container name"
$exportAdminLogin = Read-Host "Enter the SQL Server admin username"
$exportAdminPassword = Read-Host -AsSecureString "Enter the SQL Server admin password"

Write-Host "\nValidating resources..." -ForegroundColor Yellow

# Check and create resource group
if (-not (Get-AzResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue)) {
    Write-Host "Resource Group '$resourceGroupName' does not exist. Creating..." -ForegroundColor Green
    New-AzResourceGroup -Name $resourceGroupName -Location (Get-AzLocation | Select-Object -First 1).Location
} else {
    Write-Host "Resource Group '$resourceGroupName' exists." -ForegroundColor Cyan
}

# Check and create storage account
if (-not (Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName -ErrorAction SilentlyContinue)) {
    Write-Host "Storage Account '$storageAccountName' does not exist. Creating..." -ForegroundColor Green
    $storageAccount = New-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName -SkuName Standard_LRS -Location (Get-AzResourceGroup -Name $resourceGroupName).Location
} else {
    Write-Host "Storage Account '$storageAccountName' exists." -ForegroundColor Cyan
    $storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName
}

# Retrieve storage account context
$storageAccountContext = $storageAccount.Context

# Check and create blob container
if (-not (Get-AzStorageContainer -Context $storageAccountContext -Name $containerName -ErrorAction SilentlyContinue)) {
    Write-Host "Blob Container '$containerName' does not exist. Creating..." -ForegroundColor Green
    New-AzStorageContainer -Context $storageAccountContext -Name $containerName
} else {
    Write-Host "Blob Container '$containerName' exists." -ForegroundColor Cyan
}

# Generate SAS token for storage account
$sasToken = New-AzStorageAccountSASToken -Context $storageAccountContext -ExpiryTime (Get-Date).AddYears(1) -Permission rw -ResourceType Container -Service Blob

# Export database
Write-Host "\nStarting database export..." -ForegroundColor Yellow
$exportOperation = New-AzSqlDatabaseExport -ResourceGroupName $resourceGroupName -ServerName $sqlServerName -DatabaseName $sqlDatabaseName `
    -StorageKeyType StorageAccessKey -StorageKey (ConvertTo-SecureString $storageAccount.StorageAccountKey -AsPlainText -Force) `
    -StorageUri "https://$($storageAccountName).blob.core.windows.net/$($containerName)/$($sqlDatabaseName)_$(Get-Date -Format yyyyMMddHHmmss).bacpac" `
    -AdministratorLogin $exportAdminLogin -AdministratorLoginPassword $exportAdminPassword

Write-Host "\nDatabase export operation initiated. Monitor the Azure portal for completion." -ForegroundColor Green

# Add script to Azure Automation for scheduling
Write-Host "\nTo schedule this script in an Automation Account:" -ForegroundColor Yellow
Write-Host "1. Save this script as a PowerShell runbook in your Automation Account." -ForegroundColor Cyan
Write-Host "2. Create a schedule (e.g., daily) and link it to the runbook." -ForegroundColor Cyan
Write-Host "\nScript execution complete." -ForegroundColor Green
