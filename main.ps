# Interactive Script to Backup Azure SQL Database to a Storage Account

# Prompt user for resource group

Write-Host "Enter the name of the Resource Group:" -ForegroundColor Cyan
$resourceGroupName = Read-Host
if (-not (Get-AzResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue)) {
    Write-Host "Resource group '$resourceGroupName' does not exist. Exiting." -ForegroundColor Red
    return
}

# Prompt user for Azure SQL Server

Write-Host "Enter the name of the Azure SQL Server:" -ForegroundColor Cyan
$sqlServerName = Read-Host
if (-not (Get-AzSqlServer -ResourceGroupName $resourceGroupName -ServerName $sqlServerName -ErrorAction SilentlyContinue)) {
    Write-Host "SQL Server '$sqlServerName' does not exist in resource group '$resourceGroupName'. Exiting." -ForegroundColor Red
    return
}

# Prompt user for Azure SQL Database

Write-Host "Enter the name of the Azure SQL Database:" -ForegroundColor Cyan
$sqlDatabaseName = Read-Host
if (-not (Get-AzSqlDatabase -ResourceGroupName $resourceGroupName -ServerName $sqlServerName -DatabaseName $sqlDatabaseName -ErrorAction SilentlyContinue)) {
    Write-Host "SQL Database '$sqlDatabaseName' does not exist on server '$sqlServerName'. Exiting." -ForegroundColor Red
    return
}

# Prompt user for Storage Account

Write-Host "Enter the name of the Storage Account:" -ForegroundColor Cyan
$storageAccountName = Read-Host
if (-not (Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName -ErrorAction SilentlyContinue)) {
    Write-Host "Storage account '$storageAccountName' does not exist in resource group '$resourceGroupName'. Exiting." -ForegroundColor Red
    return
}

# Get Storage Account Key
$storageAccountKey = (Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $storageAccountName).Value[0]

# Prompt user for Storage Container

Write-Host "Enter the name of the Storage Container:" -ForegroundColor Cyan
$containerName = Read-Host
$storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey
if (-not (Get-AzStorageContainer -Context $storageContext -Name $containerName -ErrorAction SilentlyContinue)) {
    Write-Host "Storage container '$containerName' does not exist. Creating it now..." -ForegroundColor Yellow
    New-AzStorageContainer -Name $containerName -Context $storageContext
    Write-Host "Storage container '$containerName' created successfully." -ForegroundColor Green
}

# Generate a SAS token for the Storage Account
$sasToken = New-AzStorageAccountSASToken -ResourceGroupName $resourceGroupName -AccountName $storageAccountName -Service Blob -Permission rw -ExpiryTime (Get-Date).AddHours(2)

# Construct the Storage URL
$storageUri = "https://$storageAccountName.blob.core.windows.net/$containerName/$sqlDatabaseName.bacpac"

# Start the Export Operation
Write-Host "Starting export of database '$sqlDatabaseName' to '$storageUri'..." -ForegroundColor Yellow
$exportResult = New-AzSqlDatabaseExport -ResourceGroupName $resourceGroupName `
    -ServerName $sqlServerName `
    -DatabaseName $sqlDatabaseName `
    -StorageKeyType StorageAccessKey `
    -StorageKey $storageAccountKey `
    -StorageUri $storageUri `
    -AdministratorLogin (Read-Host "Enter the SQL Server Admin Username") `
    -AdministratorLoginPassword (Read-Host "Enter the SQL Server Admin Password" -AsSecureString)

# Output Result
if ($exportResult.Status -eq "InProgress" -or $exportResult.Status -eq "Succeeded") {
    Write-Host "Export operation started successfully. Monitor the status in the Azure portal." -ForegroundColor Green
} else {
    Write-Host "Export operation failed. Check the details and try again." -ForegroundColor Red
}
